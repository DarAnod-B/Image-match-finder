# main.py
"""
–ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–±–∏—Ç –Ω–∞ —Ç—Ä–∏ —ç—Ç–∞–ø–∞:
1. `build_descriptor_cache`: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è
   –±–∞–∑–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Group 2).
2. `process_query_images`: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫—ç—à –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤
   –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã (Group 1).
3. `report_results`: –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å.

–í—Å–µ –ø—É—Ç–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª–µ `settings.py`.
"""
import os
from typing import List

# –ò–º–ø–æ—Ä—Ç—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
from logger import logger
from settings import (
    GROUP_1_DIR, GROUP_2_DIR, DESCRIPTORS_CACHE_PATH
)
from core.cacher import DescriptorCacher
from core.searcher import Searcher
from core.utils import validate_image_file


def collect_valid_images(directory: str) -> List[str]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    """
    paths = []
    if not os.path.isdir(directory):
        logger.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s", directory)
        return paths
        
    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤: %s", directory)
    for filename in sorted(os.listdir(directory)):
        full_path = os.path.join(directory, filename)
        if validate_image_file(full_path):
            paths.append(full_path)
            
    logger.info("–ù–∞–π–¥–µ–Ω–æ %d –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", len(paths))
    return paths


def build_descriptor_cache() -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ GROUP_2_DIR.
    
    Returns:
        bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    logger.info("--- –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ ---")
    
    group2_paths = collect_valid_images(GROUP_2_DIR)
    if not group2_paths:
        logger.error("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '%s' –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.", GROUP_2_DIR)
        return False
        
    cacher = DescriptorCacher(group2_paths)
    cacher.create_and_save_cache(DESCRIPTORS_CACHE_PATH)
    return True


def process_query_images() -> List[str]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ GROUP_1_DIR –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–Ω–∏–π.
    –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∏—Å—Ç—ã–π –∞–Ω–∞–ª–æ–≥, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ä—Å–∏—é.

    Returns:
        List[str]: –ò—Ç–æ–≥–æ–≤—ã–π "–æ—á–∏—â–µ–Ω–Ω—ã–π" —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.
    """
    logger.info("--- –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 1 ---")
    final_list = []
    
    try:
        searcher = Searcher(DESCRIPTORS_CACHE_PATH)
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à '%s': %s", DESCRIPTORS_CACHE_PATH, e)
        return final_list # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
    group1_paths = collect_valid_images(GROUP_1_DIR)
    
    for img1_path in group1_paths:
        logger.info("=" * 60)
        logger.info("–ü–æ–∏—Å–∫ –¥–ª—è: %s", os.path.basename(img1_path))
        
        found_match_path = searcher.find_match(img1_path)
        
        if found_match_path:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —á–∏—Å—Ç—ã–π –∞–Ω–∞–ª–æ–≥: %s", found_match_path)
            final_list.append(found_match_path)
        else:
            logger.warning("‚ö†Ô∏è –ß–∏—Å—Ç—ã–π –∞–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ä—Å–∏—é: %s", img1_path)
            final_list.append(img1_path)
            
    return final_list


def report_results(final_image_list: List[str]):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Args:
        final_image_list: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.
    """
    logger.info("\n" + "="*60)
    logger.info("–ò–¢–û–ì: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", len(final_image_list))
    
    if final_image_list:
        for img_path in final_image_list:
            print(f"üñºÔ∏è  {img_path}")
    else:
        logger.info("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    
    logger.info("="*60)


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —ç—Ç–∞–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞, –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    # 1. –°–æ–∑–¥–∞—Ç—å –∫—ç—à. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É.
    if not build_descriptor_cache():
        return

    # 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    final_list = process_query_images()

    # 3. –í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç.
    report_results(final_list)


if __name__ == "__main__":
    main()
