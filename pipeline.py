import os
from typing import List

from logger import logger
from settings import DESCRIPTORS_CACHE_PATH
from core.cacher import DescriptorCacher
from core.searcher import Searcher

# –ú–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
import data_loader 
from image_link_manager import ImageLinkManager
from redis_utils import redis_client, CHAT_ID

def _build_descriptor_cache(use_redis_mode: bool) -> bool:
    """
    –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 2.
    """
    logger.info("--- –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ ---")
    
    group2_paths = data_loader.get_group2_image_paths(use_redis_mode)

    if not group2_paths:
        logger.error("–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Group 2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False
        
    cacher = DescriptorCacher(group2_paths)
    cacher.create_and_save_cache(DESCRIPTORS_CACHE_PATH)
    return True

def _process_query_images(use_redis_mode: bool) -> List[str]:
    """
    –≠–¢–ê–ü 2: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 1.
    """
    logger.info("--- –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 1 ---")
    final_list = []
    
    try:
        searcher = Searcher(DESCRIPTORS_CACHE_PATH)
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à '%s': %s", DESCRIPTORS_CACHE_PATH, e)
        return final_list

    group1_paths = data_loader.get_group1_image_paths(use_redis_mode)
        
    if not group1_paths:
        logger.warning("–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Group 1 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –ø–æ–∏—Å–∫–∞.")
        return final_list

    for img1_path in group1_paths:
        logger.info("=" * 60)
        logger.info("–ü–æ–∏—Å–∫ –¥–ª—è: %s", os.path.basename(img1_path))
        
        found_match_path = searcher.find_match(img1_path)
        
        if found_match_path:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —á–∏—Å—Ç—ã–π –∞–Ω–∞–ª–æ–≥: %s", found_match_path)
            final_list.append(found_match_path)
        else:
            logger.warning("‚ö†Ô∏è –ß–∏—Å—Ç—ã–π –∞–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ä—Å–∏—é: %s", img1_path)
            final_list.append(img1_path)
            
    return final_list

def _update_source_and_report(final_image_list: List[str], use_redis_mode: bool):
    """
    –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ Redis) –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç.
    """
    logger.info("\n--- –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ---")

    if use_redis_mode:
        logger.info("–†–µ–∂–∏–º: Redis. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –≤ Redis...")
        manager = ImageLinkManager.from_redis(redis_client, CHAT_ID)

        if not manager:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä CSV –∏–∑ Redis. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        elif manager.rows:
            manager.set_image_links(0, final_image_list)
            updated_content = manager.save_changes_and_get_content()
            if updated_content:
                redis_client.set(f'{CHAT_ID}:csv:raw', updated_content)
                logger.info("‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π CSV —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis.")
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫.")
        else:
            logger.warning("–í CSV –∏–∑ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

    logger.info("\n" + "="*60)
    logger.info("–ò–¢–û–ì: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", len(final_image_list))
    
    if final_image_list:
        for img_path in final_image_list:
            print(f"üñºÔ∏è  {img_path}")
    else:
        logger.info("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    
    logger.info("="*60)

def run_pipeline(use_redis: bool):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∫–æ–Ω–≤–µ–π–µ—Ä–∞.
    """
    # –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞—Ç—å –∫—ç—à
    if not _build_descriptor_cache(use_redis):
        return

    # –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
    final_list = _process_query_images(use_redis)

    # –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç
    _update_source_and_report(final_list, use_redis)
