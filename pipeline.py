"""
–ú–æ–¥—É–ª—å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –ó–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.
- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —ç—Ç–∞–ø–æ–≤:
  1. –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤.
  2. –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
  3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (Redis) –∏/–∏–ª–∏ –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞.
"""
import os
from typing import List

from logger import logger
from settings import DESCRIPTORS_CACHE_PATH
from core.cacher import DescriptorCacher
from core.searcher import Searcher

# –ú–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
import data_loader
from image_link_manager import ImageLinkManager

# Redis
from redis_handler import get_redis_client, CHAT_ID

def _build_descriptor_cache(use_redis_mode: bool) -> bool:
    """
    –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 2.
    """
    logger.info("--- –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ ---")

    group2_paths = data_loader.get_group2_image_paths(use_redis_mode)

    if not group2_paths:
        logger.error("–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Group 2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False

    cacher = DescriptorCacher(group2_paths)
    cacher.create_and_save_cache(DESCRIPTORS_CACHE_PATH)
    return True

def _process_query_images(use_redis_mode: bool, keep_unmatched_images: bool) -> List[str]:
    """
    –≠–¢–ê–ü 2: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 1.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    logger.info("--- –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 1 ---")
    final_list = []

    try:
        searcher = Searcher(DESCRIPTORS_CACHE_PATH)
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à '%s': %s", DESCRIPTORS_CACHE_PATH, e)
        return final_list

    group1_paths = data_loader.get_group1_image_paths(use_redis_mode)
    logger.debug("G1 after loader  : %s", group1_paths)

    if not group1_paths:
        logger.warning("–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Group 1 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return final_list

    # –¶–∏–∫–ª –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
    for img1_path in group1_paths:
        logger.info("=" * 60)
        logger.info("–ü–æ–∏—Å–∫ –¥–ª—è: %s", os.path.basename(img1_path))

        found_match_path = searcher.find_match(img1_path)

        if found_match_path:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω —á–∏—Å—Ç—ã–π –∞–Ω–∞–ª–æ–≥: %s", found_match_path)
            final_list.append(found_match_path)
        else:
            logger.warning("‚ö†Ô∏è –ß–∏—Å—Ç—ã–π –∞–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: %s", os.path.basename(img1_path))

            # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —É—Å–ª–æ–≤–Ω–∞—è
            if keep_unmatched_images:
                logger.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (KEEP_UNMATCHED_IMAGES=True).")
                final_list.append(img1_path)
            else:
                logger.info("–û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (KEEP_UNMATCHED_IMAGES=False).")
    logger.debug("G1 final_list    : %s", final_list)

    return final_list

def _update_source_and_report(final_image_list: List[str], use_redis_mode: bool):
    """
    –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ Redis) –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç.
    """
    logger.info("\n--- –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ---")

    if use_redis_mode:
        logger.info("–†–µ–∂–∏–º: Redis. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –≤ Redis...")

        redis_client = get_redis_client()

        if redis_client and CHAT_ID:
            manager = ImageLinkManager.from_redis(redis_client, CHAT_ID)

            if not manager:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä CSV –∏–∑ Redis. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            elif manager.rows:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é) —Å—Ç—Ä–æ–∫—É
                manager.set_image_links(0, final_image_list)
                updated_content = manager.save_changes_and_get_content()

                if updated_content:
                    redis_client.set(f'{CHAT_ID}:csv:raw', updated_content)
                    logger.info("‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π CSV —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis.")
                else:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫.")
            else:
                logger.warning("–í CSV –∏–∑ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        else:
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Redis –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ)
    logger.info("\n" + "="*60)
    logger.info("–ò–¢–û–ì: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", len(final_image_list))

    if final_image_list:
        for img_path in final_image_list:
            print(f"üñºÔ∏è  {img_path}")
    else:
        logger.info("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

    logger.info("="*60)

def run_pipeline(use_redis: bool):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∫–æ–Ω–≤–µ–π–µ—Ä–∞.
    """
    # --- 1. –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
    keep_unmatched_images = True  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if use_redis:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Redis...")
        redis_client = get_redis_client()
        if redis_client:
            config_key = f'{CHAT_ID}:KEEP_UNMATCHED'
            config_value = redis_client.get(config_key)
            if config_value is not None:
                # Redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∏–≤–æ–¥–∏–º –∫ boolean
                keep_unmatched_images = config_value.lower() == 'true'
                logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ KEEP_UNMATCHED –∏–∑ Redis ('%s'): %s", config_key, keep_unmatched_images)
            else:
                logger.warning("–ö–ª—é—á '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s", config_key, keep_unmatched_images)
    else:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ settings.py...")
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        from settings import KEEP_UNMATCHED_IMAGES
        keep_unmatched_images = KEEP_UNMATCHED_IMAGES
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ KEEP_UNMATCHED –∏–∑ settings.py: %s", keep_unmatched_images)

    # --- 2. –í–´–ü–û–õ–ù–ï–ù–ò–ï –≠–¢–ê–ü–û–í –ö–û–ù–í–ï–ô–ï–†–ê ---

    # –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞—Ç—å –∫—ç—à
    if not _build_descriptor_cache(use_redis):
        return

    # –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    final_list = _process_query_images(use_redis, keep_unmatched_images)

    # –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç
    _update_source_and_report(final_list, use_redis)