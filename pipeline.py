import os
import shutil
from typing import List, Optional

from logger import logger
# –î–æ–±–∞–≤–ª—è–µ–º OUTPUT_DIR –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
from settings import DESCRIPTORS_CACHE_PATH, OUTPUT_DIR
from core.cacher import DescriptorCacher
from core.searcher import Searcher

# –ú–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
import data_loader
from image_link_manager import ImageLinkManager

# Redis
from redis_handler import get_redis_client, CHAT_ID

def _prepare_output_directory(chat_id: str) -> Optional[str]:
    """
    –°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç—É—é –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_output_dir = os.path.join(OUTPUT_DIR, chat_id)
        
        # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if os.path.exists(session_output_dir):
            shutil.rmtree(session_output_dir)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(session_output_dir, exist_ok=True)
        logger.info("–°–æ–∑–¥–∞–Ω–∞ —á–∏—Å—Ç–∞—è –≤—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s", session_output_dir)
        return session_output_dir
    except Exception as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %s", e)
        return None


def _build_descriptor_cache(use_redis_mode: bool) -> bool:
    """
    –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Group 2.
    """
    logger.info("--- –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ ---")
    group2_paths = data_loader.get_group2_image_paths(use_redis_mode)
    if not group2_paths:
        logger.error("–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Group 2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return False
    cacher = DescriptorCacher(group2_paths)
    cacher.create_and_save_cache(DESCRIPTORS_CACHE_PATH)
    return True

def _process_query_images(use_redis_mode: bool, keep_unmatched_images: bool) -> List[str]:
    """
    –≠–¢–ê–ü 2: –ò—â–µ—Ç –∞–Ω–∞–ª–æ–≥–∏, –∫–æ–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∞–Ω–∞–ª–æ–≥ –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª) –≤ –Ω–æ–≤—É—é
    –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏–º–µ–Ω–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–Ω–¥–µ–∫—Å—É, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –Ω–æ–≤—ã–º —Ñ–∞–π–ª–∞–º.
    """
    logger.info("--- –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---")
    
    # 0. –ì–æ—Ç–æ–≤–∏–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir = _prepare_output_directory(CHAT_ID)
    if not output_dir:
        return []

    results_with_indices = []
    try:
        searcher = Searcher(DESCRIPTORS_CACHE_PATH)
    except Exception as e:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à '%s': %s", DESCRIPTORS_CACHE_PATH, e)
        return []

    # 1. –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –° –ò–ù–î–ï–ö–°–ê–ú–ò
    group1_data = data_loader.get_group1_image_paths_with_indices(use_redis_mode)
    if not group1_data:
        logger.warning("–í –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Group 1 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return []

    # 2. –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø, –ö–û–ü–ò–†–£–ï–ú –ò –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–´–ô –ü–£–¢–¨
    for original_index, img1_path in group1_data:
        logger.info("=" * 60)
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ %d (—Ñ–∞–π–ª: %s)", original_index, os.path.basename(img1_path))

        source_path_for_copy = None
        found_match_path = searcher.find_match(img1_path)

        if found_match_path:
            logger.info("‚úÖ –ù–∞–π–¥–µ–Ω –∞–Ω–∞–ª–æ–≥: %s", os.path.basename(found_match_path))
            source_path_for_copy = found_match_path
        else:
            logger.warning("‚ö†Ô∏è –ê–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            if keep_unmatched_images:
                logger.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                source_path_for_copy = img1_path
            else:
                logger.info("–û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é, —Ñ–∞–π–ª –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω

        # 3. –ö–û–ü–ò–†–£–ï–ú –í–´–ë–†–ê–ù–ù–´–ô –§–ê–ô–õ –í –í–´–•–û–î–ù–£–Æ –î–ò–†–ï–ö–¢–û–†–ò–Æ –° –ù–û–í–´–ú –ò–ú–ï–ù–ï–ú
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            _, extension = os.path.splitext(source_path_for_copy)
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.jpg, 2.jpg)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º original_index, —Ç.–∫. –æ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            destination_name = f"{original_index}{extension}"
            destination_path = os.path.join(output_dir, destination_name)

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(source_path_for_copy, destination_path)
            logger.info("–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: %s", destination_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ç–µ–∂ —Å –∏–Ω–¥–µ–∫—Å–æ–º –∏ –ü–£–¢–ï–ú –ö –ù–û–í–û–ú–£ –§–ê–ô–õ–£
            results_with_indices.append((original_index, destination_path))

        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª %s: %s", source_path_for_copy, e)

    # 4. –°–û–†–¢–ò–†–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´ (—Ö–æ—Ç—è –æ–Ω–∏ –∏ —Ç–∞–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É, —ç—Ç–æ –¥–ª—è 100% –≥–∞—Ä–∞–Ω—Ç–∏–∏)
    results_with_indices.sort(key=lambda item: item[0])
    
    # 5. –§–û–†–ú–ò–†–£–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ü–£–¢–ï–ô –ö –ù–û–í–´–ú, –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ú –§–ê–ô–õ–ê–ú
    final_list = [path for index, path in results_with_indices]
    
    logger.debug("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: %s", final_list)
    return final_list


def _update_source_and_report(final_image_list: List[str], use_redis_mode: bool):
    """
    –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ Redis) –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ú–ï–ù–Ø–ï–¢–°–Ø, —Ç.–∫. –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π.
    """
    logger.info("\n--- –≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ ---")

    if use_redis_mode:
        logger.info("–†–µ–∂–∏–º: Redis. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –≤ Redis...")
        redis_client = get_redis_client()
        if redis_client and CHAT_ID:
            # ImageLinkManager –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –µ–≥–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
            manager = ImageLinkManager.from_redis(redis_client, CHAT_ID)
            if not manager:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä CSV –∏–∑ Redis.")
            elif manager.rows:
                manager.set_image_links(0, final_image_list)
                updated_content = manager.save_changes_and_get_content()
                if updated_content:
                    redis_client.set(f'{CHAT_ID}:csv:raw', updated_content)
                    logger.info("‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π CSV —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Redis.")
                else:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫.")
            else:
                logger.warning("–í CSV –∏–∑ Redis –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        else:
             logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç Redis –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    logger.info("\n" + "="*60)
    logger.info("–ò–¢–û–ì: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ %d –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", len(final_image_list))
    if final_image_list:
        for img_path in final_image_list:
            print(f"üñºÔ∏è  {img_path}")
    else:
        logger.info("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    logger.info("="*60)


def run_pipeline(use_redis: bool):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∫–æ–Ω–≤–µ–π–µ—Ä–∞.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ú–ï–ù–Ø–ï–¢–°–Ø.
    """
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ —É –≤–∞—Å)
    # --- 1. –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
    keep_unmatched_images = True  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if use_redis:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Redis...")
        redis_client = get_redis_client()
        if redis_client:
            config_key = f'{CHAT_ID}:KEEP_UNMATCHED'
            config_value = redis_client.get(config_key)
            if config_value is not None:
                keep_unmatched_images = config_value.lower() == 'true'
                logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ KEEP_UNMATCHED –∏–∑ Redis ('%s'): %s", config_key, keep_unmatched_images)
            else:
                logger.warning("–ö–ª—é—á '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s", config_key, keep_unmatched_images)
    else:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ settings.py...")
        from settings import KEEP_UNMATCHED_IMAGES
        keep_unmatched_images = KEEP_UNMATCHED_IMAGES
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ KEEP_UNMATCHED –∏–∑ settings.py: %s", keep_unmatched_images)

    # --- 2. –í–´–ü–û–õ–ù–ï–ù–ò–ï –≠–¢–ê–ü–û–í –ö–û–ù–í–ï–ô–ï–†–ê ---
    if not _build_descriptor_cache(use_redis):
        return

    final_list = _process_query_images(use_redis, keep_unmatched_images)

    _update_source_and_report(final_list, use_redis)
